import os
import shutil


'''
Used in the even of VPN overwriting the original resolv.conf file 

Occurs when: Cyberghost VPN running &
Ubuntu 22.04 is put to sleep and "woken up"
and/or
Ubuntu 22.04 crashes/freezes in mid operation.

...if screen shuts off but PC not put to sleep, does not occur....

'''

# Define the path to the resolv.conf file
resolv_conf_path = "/etc/resolv.conf"

# New contents for the file
new_resolv_conf_contents = """
# Generated by resolv-reset.py in the event of VPN overwriting resolv.conf
#
# This is /run/systemd/resolve/resolv.conf managed by man:systemd-resolved(8).
# Do not edit.
#
# This file might be symlinked as /etc/resolv.conf. If you're looking at
# /etc/resolv.conf and seeing this text, you have followed the symlink.
#
# This is a dynamic resolv.conf file for connecting local clients directly to
# all known uplink DNS servers. This file lists all configured search domains.
#
# Third party programs should typically not access this file directly, but only
# through the symlink at /etc/resolv.conf. To manage man:resolv.conf(5) in a
# different way, replace this symlink by a static file or a different symlink.
#
# See man:systemd-resolved.service(8) for details about the supported modes of
# operation for /etc/resolv.conf.


# Use Cloudflare DNS
nameserver 1.1.1.1
nameserver 1.0.0.1
nameserver 2606:4700:4700::1111
nameserver 2606:4700:4700::1001

# Use Quad9 DNS 
nameserver 9.9.9.9
nameserver 149.112.112.112
nameserver 2620:fe::fe
nameserver 2620:fe::9

# Use Google DNS
nameserver 8.8.8.8 
nameserver 8.8.4.4
nameserver 2001:4860:4860::8888
nameserver 2001:4860:4860::8844
"""

# Check if root privileges
if os.geteuid() != 0:
    print("This script must be run with root privileges.")
    exit(1)

# Check if resolv.conf exists
if os.path.exists(resolv_conf_path):
    try:
        # Create a backup
        shutil.copy2(resolv_conf_path, f"{resolv_conf_path}.bak")
        print(f"Backed up {resolv_conf_path} to {resolv_conf_path}.bak")

        # Delete the existing
        os.remove(resolv_conf_path)
        print(f"Deleted {resolv_conf_path}")

        # Create a new resolv.conf
        with open(resolv_conf_path, "w") as f:
            f.write(new_resolv_conf_contents)
        print(f"Created new {resolv_conf_path} with the following contents:\n{new_resolv_conf_contents}")

    except Exception as e:
        print(f"An error occurred: {e}")
else:
    print(f"{resolv_conf_path} does not exist.")